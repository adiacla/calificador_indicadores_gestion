# %% [markdown] {"jupyter":{"outputs_hidden":false}}
"""
# ü§ñ Generador de An√°lisis con IA para Indicadores de Gesti√≥n

Este notebook permite generar an√°lisis y visualizaciones autom√°ticamente usando IA (Gemini) a partir de archivos CSV.

## Caracter√≠sticas:
- ‚úÖ Carga de archivos CSV
- ‚úÖ Generaci√≥n autom√°tica de c√≥digo Python con IA
- ‚úÖ Ejecuci√≥n segura del c√≥digo generado
- ‚úÖ Visualizaciones autom√°ticas con matplotlib/seaborn
- ‚úÖ An√°lisis de datos con pandas

## Instrucciones:
1. Sube tu archivo CSV a Kaggle
2. Ejecuta las celdas en orden
3. Modifica las instrucciones para el an√°lisis que deseas
4. ¬°Disfruta de las visualizaciones generadas autom√°ticamente!
"""

# %% [code]
# Instalaci√≥n de dependencias (ejecutar solo si es necesario en Kaggle)
import subprocess
import sys


def install_if_missing(package):
    try:
        __import__(package)
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])


# Instalar google-genai si no est√° disponible
try:
    import google.genai
except ImportError:
    print("Instalando google-genai...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "google-genai"])

# %% [code]
# Importar todas las librer√≠as necesarias
import io
import sys
import contextlib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from typing import Dict, Any, List, Tuple
import base64
import warnings
import tempfile
import os
from datetime import datetime
from google import genai
from google.genai import types
from IPython.display import display

warnings.filterwarnings("ignore")
plt.style.use("seaborn-v0_8")
sns.set_palette("husl")

print("‚úÖ Todas las librer√≠as importadas correctamente")


# %% [code]
class SafeCodeExecutor:
    """Ejecutor seguro de c√≥digo Python para an√°lisis de datos y visualizaci√≥n"""

    def __init__(self):
        self.allowed_imports = {
            "pandas",
            "numpy",
            "matplotlib",
            "seaborn",
            "plotly",
            "scipy",
            "sklearn",
            "math",
            "datetime",
            "json",
        }
        self.figures = []
        self.figure_files = []

    def execute_code(self, code: str, df: pd.DataFrame = None) -> Dict[str, Any]:
        """Ejecuta c√≥digo Python de forma segura y captura outputs y gr√°ficas"""
        # Limpiar figuras anteriores
        plt.close("all")
        self.figures = []
        self.figure_files = []

        # Capturar stdout
        old_stdout = sys.stdout
        captured_output = io.StringIO()

        # Namespace seguro para ejecuci√≥n
        safe_namespace = {
            "pd": pd,
            "np": np,
            "plt": plt,
            "sns": sns,
            "px": px,
            "go": go,
            "df": df,
            "print": print,
            "__builtins__": {
                "len": len,
                "range": range,
                "enumerate": enumerate,
                "zip": zip,
                "sum": sum,
                "max": max,
                "min": min,
                "abs": abs,
                "round": round,
                "sorted": sorted,
                "type": type,
                "str": str,
                "int": int,
                "float": float,
                "list": list,
                "dict": dict,
                "tuple": tuple,
                "set": set,
                "__import__": __import__,
            },
        }

        result = {
            "success": False,
            "output": "",
            "error": "",
            "figures": [],
            "figure_files": [],
            "variables": {},
        }

        try:
            # Redirigir stdout
            sys.stdout = captured_output

            # Ejecutar c√≥digo
            exec(code, safe_namespace)

            # Capturar figuras de matplotlib
            for fig_num in plt.get_fignums():
                fig = plt.figure(fig_num)

                # Guardar como base64 (para mostrar)
                buf = io.BytesIO()
                fig.savefig(buf, format="png", bbox_inches="tight", dpi=150)
                buf.seek(0)
                img_base64 = base64.b64encode(buf.read()).decode("utf-8")
                self.figures.append(img_base64)
                buf.close()

                # Mostrar la figura directamente en el notebook
                plt.show()

            result["success"] = True
            result["output"] = captured_output.getvalue()
            result["figures"] = self.figures

            # Capturar variables creadas
            result["variables"] = {
                k: v
                for k, v in safe_namespace.items()
                if not k.startswith("_")
                and k not in ["pd", "np", "plt", "sns", "px", "go"]
            }

        except Exception as e:
            result["error"] = str(e)
            result["output"] = captured_output.getvalue()

        finally:
            # Restaurar stdout
            sys.stdout = old_stdout

        return result

    def validate_code(self, code: str) -> Tuple[bool, str]:
        """Valida que el c√≥digo sea seguro de ejecutar"""
        dangerous_keywords = [
            "import os",
            "import subprocess",
            "import sys",
            "exec(",
            "eval(",
            "open(",
            "__import__",
            "compile(",
            "globals()",
            "locals()",
            "file",
            "input(",
            "raw_input(",
        ]

        for keyword in dangerous_keywords:
            if keyword in code:
                return False, f"C√≥digo contiene operaci√≥n peligrosa: {keyword}"

        return True, "C√≥digo v√°lido"


print("‚úÖ SafeCodeExecutor definido correctamente")


# %% [code]
def generate_code_from_prompt(user_prompt: str, df: pd.DataFrame, api_key: str) -> str:
    """Genera c√≥digo Python basado en un prompt de usuario y un DataFrame."""

    if not api_key:
        return "Error: Se requiere una API key de Google Gemini"

    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-flash"

    # Prepara la informaci√≥n del DataFrame para el prompt
    df_head = df.head().to_string()
    df_info = (
        f"Columnas: {df.columns.tolist()}\nTipos de datos:\n{df.dtypes.to_string()}"
    )

    prompt = f"""
    Eres un asistente experto en ciencia de datos en Python. Tu tarea es generar c√≥digo Python para analizar y visualizar datos de un DataFrame de pandas.

    **Instrucciones del usuario:**
    "{user_prompt}"

    **Informaci√≥n del DataFrame (disponible como `df`):**
    Primeras 5 filas:
    {df_head}

    {df_info}

    **Requisitos del c√≥digo:**
    1. Usa las librer√≠as `pandas`, `matplotlib.pyplot` as `plt`, y `seaborn` as `sns`.
    2. El DataFrame ya est√° cargado en una variable llamada `df`. NO incluyas c√≥digo para cargar datos.
    3. El c√≥digo debe ser completo y ejecutable.
    4. Genera al menos una visualizaci√≥n (gr√°fica).
    5. **IMPORTANTE**: Si necesitas crear m√∫ltiples gr√°ficos, usa `plt.figure()` para cada gr√°fico individual.
    6. Para cada gr√°fico usa esta estructura:
       ```
       plt.figure(figsize=(10, 6))
       # ... c√≥digo del gr√°fico ...
       plt.title('T√≠tulo del gr√°fico')
       plt.tight_layout()
       plt.show()
       ```
    7. **NUNCA** uses `plt.subplot()` o `plt.subplots()`. Cada visualizaci√≥n debe ser una figura independiente.
    8. **SOLO** devuelve el c√≥digo Python puro, sin explicaciones, ni texto adicional, ni markdown.

    **Ahora, genera el c√≥digo Python para la solicitud del usuario:**
    """

    try:
        generate_content_config = types.GenerateContentConfig(
            response_mime_type="text/plain",
        )
        response = client.models.generate_content(
            model=model_name,
            contents=prompt,
            config=generate_content_config,
        )

        code = response.text
        # Limpia la respuesta para obtener solo el c√≥digo
        if "```python" in code:
            code = code.split("```python")[1].split("```")[0].strip()
        elif "```" in code:
            code = code.split("```")[1].strip()

        return code
    except Exception as e:
        return f"Error al generar c√≥digo: {e}"


print("‚úÖ Generador de c√≥digo IA definido correctamente")

# %% [markdown] {"jupyter":{"outputs_hidden":false}}
"""
## üîß Configuraci√≥n

### 1. API Key de Google Gemini
Para usar este notebook necesitas una API key de Google Gemini. Puedes obtenerla en:
https://ai.google.dev/

### 2. Archivo CSV
Sube tu archivo CSV con los datos que quieres analizar.
"""

# %% [code]
# CONFIGURACI√ìN: Ingresa tu API key de Google Gemini aqu√≠
GOOGLE_API_KEY = ""  # ‚ö†Ô∏è CAMBIA ESTO POR TU API KEY

# Verificar API key
if not GOOGLE_API_KEY:
    print("‚ö†Ô∏è IMPORTANTE: Debes configurar tu GOOGLE_API_KEY en la celda anterior")
    print("üîó Obt√©n tu API key en: https://ai.google.dev/")
else:
    print("‚úÖ API key configurada correctamente")

# %% [code]
# CONFIGURACI√ìN: Ruta a tu archivo CSV
# En Kaggle, los archivos subidos est√°n en /kaggle/input/nombre-del-dataset/
CSV_FILE_PATH = "/kaggle/input/your-dataset/your-file.csv"  # ‚ö†Ô∏è CAMBIA ESTA RUTA

# Intentar cargar diferentes rutas comunes en Kaggle
possible_paths = [
    CSV_FILE_PATH,
    "/kaggle/input/indicadores.csv",
    "/kaggle/input/datos.csv",
    "/kaggle/input/data.csv",
]

df = None
for path in possible_paths:
    try:
        if os.path.exists(path):
            df = pd.read_csv(path)
            print(f"‚úÖ Archivo CSV cargado exitosamente desde: {path}")
            print(f"üìä Dimensiones: {df.shape[0]} filas x {df.shape[1]} columnas")
            break
    except Exception as e:
        continue

if df is None:
    print("‚ùå No se pudo cargar ning√∫n archivo CSV")
    print("üîß Por favor:")
    print("   1. Sube tu archivo CSV a Kaggle")
    print("   2. Actualiza la variable CSV_FILE_PATH con la ruta correcta")
    print(
        "   3. Las rutas en Kaggle suelen ser: /kaggle/input/nombre-dataset/archivo.csv"
    )
else:
    # Mostrar informaci√≥n b√°sica del dataset
    print("\nüìã Informaci√≥n del Dataset:")
    print("=" * 50)
    print(f"Columnas: {df.columns.tolist()}")
    print(f"\nTipos de datos:")
    print(df.dtypes)
    print(f"\nPrimeras 5 filas:")
    display(df.head())

# %% [markdown] {"jupyter":{"outputs_hidden":false}}
"""
## ü§ñ Generador de An√°lisis con IA

Ahora puedes escribir en lenguaje natural qu√© tipo de an√°lisis y visualizaciones quieres generar.

### Ejemplos de instrucciones:
- "Crea un dashboard con gr√°ficas de barras y l√≠neas para mostrar tendencias de indicadores"
- "Genera un an√°lisis comparativo entre diferentes tipos de indicadores"
- "Muestra la distribuci√≥n de calificaciones con histogramas y gr√°ficas de caja"
- "Crea visualizaciones para identificar correlaciones entre variables"
- "Analiza la evoluci√≥n temporal de los indicadores principales"
"""

# %% [code]
# INSTRUCCIONES PARA EL AN√ÅLISIS
# Modifica esta variable con las instrucciones de lo que quieres analizar

instrucciones_usuario = """
Crea un an√°lisis completo de los datos con las siguientes visualizaciones:
1. Una gr√°fica de barras mostrando la distribuci√≥n de las principales variables categ√≥ricas
2. Un histograma para mostrar la distribuci√≥n de las variables num√©ricas m√°s importantes
3. Una matriz de correlaci√≥n en formato heatmap si hay variables num√©ricas
4. Un gr√°fico de tendencias si hay columnas de fecha/tiempo
5. Un resumen estad√≠stico descriptivo impreso en consola

Usa colores atractivos y t√≠tulos descriptivos para cada gr√°fica.
"""

print("üìù Instrucciones configuradas:")
print(instrucciones_usuario)

# %% [code]
# GENERAR Y EJECUTAR C√ìDIGO CON IA

if df is not None and GOOGLE_API_KEY:
    print("ü§ñ Generando c√≥digo con IA...")
    print("‚è≥ Esto puede tomar unos segundos...")

    # Generar c√≥digo
    codigo_generado = generate_code_from_prompt(
        instrucciones_usuario, df, GOOGLE_API_KEY
    )

    if codigo_generado.startswith("Error"):
        print(f"‚ùå {codigo_generado}")
    else:
        print("‚úÖ C√≥digo generado exitosamente!")
        print("\n" + "=" * 60)
        print("üìÑ C√ìDIGO GENERADO:")
        print("=" * 60)
        print(codigo_generado)
        print("=" * 60)

        # Ejecutar c√≥digo de forma segura
        print("\nüöÄ Ejecutando c√≥digo...")
        executor = SafeCodeExecutor()

        # Validar c√≥digo
        es_valido, mensaje_validacion = executor.validate_code(codigo_generado)
        if not es_valido:
            print(f"‚ùå C√≥digo no seguro: {mensaje_validacion}")
        else:
            # Ejecutar
            resultado = executor.execute_code(codigo_generado, df)

            if resultado["success"]:
                print("‚úÖ ¬°C√≥digo ejecutado exitosamente!")
                print(f"üìä Gr√°ficas generadas: {len(resultado['figures'])}")

                if resultado["output"]:
                    print(f"\nüìã Output del c√≥digo:")
                    print("-" * 40)
                    print(resultado["output"])

            else:
                print(f"‚ùå Error al ejecutar el c√≥digo:")
                print(resultado["error"])
                if resultado["output"]:
                    print(f"\nOutput parcial:")
                    print(resultado["output"])
else:
    if df is None:
        print("‚ùå Primero debes cargar un archivo CSV")
    if not GOOGLE_API_KEY:
        print("‚ùå Primero debes configurar tu GOOGLE_API_KEY")

# %% [markdown] {"jupyter":{"outputs_hidden":false}}
"""
## üîÑ Generar M√°s An√°lisis

Si quieres generar an√°lisis adicionales, puedes:
1. Modificar la variable `instrucciones_usuario` con nuevas instrucciones
2. Ejecutar nuevamente la celda anterior
3. El c√≥digo se regenerar√° autom√°ticamente con las nuevas instrucciones

### Otras instrucciones que puedes probar:
- "Crea gr√°ficos de dispersi√≥n para encontrar relaciones entre variables num√©ricas"
- "Genera un an√°lisis de outliers con box plots"
- "Crea un dashboard con m√∫ltiples m√©tricas de resumen"
- "Analiza la distribuci√≥n geogr√°fica si hay datos de ubicaci√≥n"
- "Genera gr√°ficos de series temporales si hay fechas"
"""

# %% [code]
# AN√ÅLISIS PERSONALIZADO ADICIONAL
# Puedes escribir aqu√≠ c√≥digo personalizado o usar el generador nuevamente

# Ejemplo: An√°lisis manual b√°sico
if df is not None:
    print("üìä Resumen r√°pido del dataset:")
    print(f"Forma del dataset: {df.shape}")
    print(f"Valores nulos por columna:")
    print(df.isnull().sum())
    print(f"\nInformaci√≥n general:")
    df.info()

# %% [markdown] {"jupyter":{"outputs_hidden":false}}
"""
## üí° Tips para usar este notebook:

1. **API Key**: Aseg√∫rate de tener una API key v√°lida de Google Gemini
2. **Datos**: Sube archivos CSV limpios para mejores resultados
3. **Instrucciones**: S√© espec√≠fico en tus instrucciones para obtener mejores visualizaciones
4. **Iteraci√≥n**: Puedes generar m√∫ltiples an√°lisis cambiando las instrucciones
5. **Personalizaci√≥n**: Siempre puedes editar el c√≥digo generado manualmente

## üîó Enlaces √∫tiles:
- [Google AI Studio](https://ai.google.dev/) - Para obtener tu API key
- [Documentaci√≥n Pandas](https://pandas.pydata.org/docs/)
- [Matplotlib Gallery](https://matplotlib.org/stable/gallery/)
- [Seaborn Gallery](https://seaborn.pydata.org/examples/)

---
**¬°Disfruta explorando tus datos con IA! üöÄ**
"""
